// This is a skeleton starter React component generated by Plasmic.
// This file is owned by you, feel free to edit as you see fit.
import * as React from "react";
import {
  PlasmicCodeSandboxDialogContent,
  PlasmicCodeSandboxDialogContent__VariantsArgs,
  DefaultCodeSandboxDialogContentProps,
} from "@/wab/client/components/widgets/plasmic/PlasmicCodeSandboxDialogContent";
import { StudioCtx } from "@/wab/client/studio-ctx/StudioCtx";
import { notification } from "antd";
import { createSandboxUrl } from "@/wab/codesandbox/url";
import { asOne, ensure, isValidEmail, spawn } from "@/wab/common";
import { CodeSandboxInfo } from "@/wab/shared/db-json-blobs";

interface CodeSandboxDialogContentProps
  extends DefaultCodeSandboxDialogContentProps {
  sc: StudioCtx;
  onClose: () => void; // Required className prop is used for positioning this component
  className?: string;
}

function CodeSandboxDialogContent(props: CodeSandboxDialogContentProps) {
  const sc = props.sc;
  const [inviting, setInviting] = React.useState(false);
  const [submitting, setSubmitting] = React.useState(false);
  const [email, setEmail] = React.useState("");
  const [sandboxInfo, setSandboxInfo] = React.useState<
    CodeSandboxInfo | undefined
  >(asOne(sc.siteInfo.codeSandboxInfos));
  const isLoggedIn = sc.appCtx.selfInfo != null;

  const openSandboxPopup = (sandboxId: string) => {
    const url = createSandboxUrl({ id: sandboxId });
    if (sc.popupCodesandboxWindow && !sc.popupCodesandboxWindow.closed) {
      sc.popupCodesandboxWindow.location.href = url;
      sc.popupCodesandboxWindow.focus();
    } else {
      sc.popupCodesandboxWindow = window.open(url);
      if (!sc.popupCodesandboxWindow) {
        notification.open({
          message: "Cannot open CodeSandbox",
          description: (
            <div>
              Make sure the browser is not blocking the popup window for
              studio.plasmic.app. For Chrome, you can set it to 'Allow' as
              follows.
              <br />
              <img src="static/img/popup.png"></img>
            </div>
          ),

          duration: 10000,
        });
      }
    }
  };

  const onCreateOrUpdateSandbox = async () => {
    setSubmitting(true);
    try {
      const { id } = await sc.appCtx.api.publishCodeSandbox(
        sc.siteInfo.id,
        sandboxInfo
          ? JSON.parse(JSON.stringify(sandboxInfo))
          : {
              code: {
                lang: "ts",
                scheme: "blackbox",
              },
            }
      );

      await sc.refreshSiteInfo();
      setSandboxInfo(
        (sc.siteInfo.codeSandboxInfos || []).find((x) => x.id === id)
      );

      openSandboxPopup(id);
    } finally {
      setSubmitting(false);
    }
  };

  const onInvite = () => {
    setInviting(true);
    spawn(
      sc.appCtx.api
        .shareCodeSandbox(
          sc.siteInfo.id,
          ensure(sandboxInfo, "missing sandboxInfo").id,
          email
        )
        .then(() => {
          setInviting(false);
        })
    );
    setEmail("");
  };

  const onDeleteSandbox = async () => {
    setSubmitting(true);
    await sc.appCtx.api.detachCodeSandbox(
      sc.siteInfo.id,
      ensure(sandboxInfo, "missing sandboxInfo").id
    );

    await sc.refreshSiteInfo();
    setSubmitting(false);
    setSandboxInfo(undefined);
  };

  const variants: PlasmicCodeSandboxDialogContent__VariantsArgs = {
    state: !isLoggedIn
      ? "unlogged"
      : inviting
      ? "inviting"
      : submitting
      ? "submitting"
      : undefined,
    hasSandbox: sandboxInfo ? "yes" : "no",
    invalidEmail: email && !isValidEmail(email) ? "yes" : undefined,
    canEdit: !sc.canEditProject() ? "no" : undefined,
  };

  return (
    <PlasmicCodeSandboxDialogContent
      variants={variants}
      openButton={{
        onClick: () =>
          openSandboxPopup(ensure(sandboxInfo, "missing sandboxInfo").id),
      }}
      createButton={{ onClick: onCreateOrUpdateSandbox }}
      updateButton={{ onClick: onCreateOrUpdateSandbox }}
      deleteButton={{ onClick: onDeleteSandbox }}
      email={{ value: email, onChange: (e) => setEmail(e.target.value) }}
      inviteButton={{ onClick: email ? onInvite : undefined }}
      closeButton={{ onClick: props.onClose }}
    />
  );
}

export default CodeSandboxDialogContent;
