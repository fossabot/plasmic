// This is a skeleton starter React component generated by Plasmic.
// This file is owned by you, feel free to edit as you see fit.
import { Mixin, ThemeStyle, Variant } from "@/wab/classes";
import { MixinFormContent } from "@/wab/client/components/sidebar/MixinControls";
import { useAsyncStrict } from "@/wab/client/hooks/useAsyncStrict";
import {
  DefaultDefaultStylesPanelProps,
  PlasmicDefaultStylesPanel,
} from "@/wab/client/plasmic/plasmic_kit_left_pane/PlasmicDefaultStylesPanel";
import { useStudioCtx } from "@/wab/client/studio-ctx/StudioCtx";
import { ensure, mkShortId } from "@/wab/common";
import { DEVFLAGS } from "@/wab/devflags";
import { isTagListContainer } from "@/wab/shared/core/rich-text-util";
import { isScreenVariant } from "@/wab/shared/Variants";
import { getApplicableSelectors, mkRuleSet, THEMABLE_TAGS } from "@/wab/styles";
import { HTMLElementRefOf } from "@plasmicapp/react-web";
import { observer } from "mobx-react";
import * as React from "react";
import { RuleSetHelpers } from "src/wab/shared/RuleSetHelpers";
import { DEFAULT_THEME_STYLES } from "src/wab/sites";

export type DefaultStylesPanelProps = DefaultDefaultStylesPanelProps;

const DefaultStylesPanel = observer(
  React.forwardRef(function DefaultStylesPanel(
    props: DefaultStylesPanelProps,
    ref: HTMLElementRefOf<"div">
  ) {
    const studioCtx = useStudioCtx();
    const site = studioCtx.site;
    const activeTheme = site.activeTheme;
    const readOnly = studioCtx.getLeftTabPermission("themes") === "readable";
    const [tag, setTag] = React.useState<string>("");
    const [pseudoClass, setPseudoClass] = React.useState<string>("");
    const [mixin, setMixin] = React.useState<Mixin | undefined>(undefined);
    const [selectedGlobalVariants, setSelectedGlobalVariants] = React.useState<
      Variant[]
    >([]);

    const pseudoClassOptions = tag
      ? getApplicableSelectors(tag, true, false)
      : [];

    useAsyncStrict(async () => {
      if (!activeTheme) {
        setMixin(undefined);
        return;
      }

      if (!tag) {
        setMixin(activeTheme.defaultStyle);
        setPseudoClass("");
        return;
      }

      const selector = `${tag}${pseudoClass}`;
      const existing = activeTheme.styles.find((m) => m.selector === selector);
      if (existing) {
        // If this is empty, and we switch to it, we initialize it!
        await studioCtx.change<never>(({ success }) => {
          initializeMixinWithDefaults(existing.style, selector);
          return success();
        });
        setMixin(existing.style);
        return;
      }

      await studioCtx.change<never>(({ success }) => {
        const newMixin = new Mixin({
          name: `Default "${selector}"`,
          rs: mkRuleSet({}),
          preview: undefined,
          uuid: mkShortId(),
          forTheme: true,
          variantedRs: [],
        });
        initializeMixinWithDefaults(newMixin, selector);
        activeTheme.styles.push(
          new ThemeStyle({
            selector,
            style: newMixin,
          })
        );
        setMixin(newMixin);
        return success();
      });
    }, [activeTheme, tag, pseudoClass]);

    const nonScreenGlobalVariants = studioCtx.site.globalVariantGroups.flatMap(
      (variantGroup) => variantGroup.variants.filter((v) => !isScreenVariant(v))
    );

    if (
      selectedGlobalVariants.some(
        (v) =>
          !nonScreenGlobalVariants.includes(v) &&
          !studioCtx.site.activeScreenVariantGroup?.variants.includes(v)
      )
    ) {
      setSelectedGlobalVariants(
        selectedGlobalVariants.filter(
          (v) =>
            nonScreenGlobalVariants.includes(v) ||
            studioCtx.site.activeScreenVariantGroup?.variants.includes(v)
        )
      );
    }

    const handleGlobalVariantChange = (variantId) => {
      if (variantId === "base") {
        setSelectedGlobalVariants([]);
      } else {
        setSelectedGlobalVariants([
          nonScreenGlobalVariants.some((v) => v.uuid === variantId)
            ? ensure(
                nonScreenGlobalVariants.find((v) => v.uuid === variantId),
                "Could not find global variant"
              )
            : ensure(
                studioCtx.site.activeScreenVariantGroup?.variants.find(
                  (v) => v.uuid === variantId
                ),
                "Could not find screen variant"
              ),
        ]);
      }
    };

    if (readOnly) {
      // Just rendering nothing if readOnly; too much work to turn mixin form
      // into readOnly for now ðŸ˜…
      return null;
    }

    return (
      <PlasmicDefaultStylesPanel
        root={{ ref }}
        tagSelect={{
          props: {
            options: [
              { value: "", label: "Normal text" },
              ...THEMABLE_TAGS.map((themeTag) => ({
                value: themeTag,
                label: (
                  <>
                    Tag: <strong>{themeTag}</strong>
                    {themeTag === "a" && ` (links)`}
                  </>
                ),
              })),
            ],
            onChange: (_tag) => setTag(_tag || ""),
            value: tag,
          },
        }}
        showPseudoClass={pseudoClassOptions.length > 0}
        pseudoClassSelect={{
          props: {
            label: "Pseudo-class",
            options: [
              { value: "", label: "Base" },
              ...pseudoClassOptions.map((op) => ({
                value: op.cssSelector,
                label: op.displayName,
              })),
            ],
            onChange: (_pseudoClass) => setPseudoClass(_pseudoClass || ""),
            value: pseudoClass,
          },
        }}
        isTargeting={selectedGlobalVariants.length > 0}
        globalVariantSelect={{
          props: {
            onChange: (e) => handleGlobalVariantChange(e),
            options: [
              { value: "base", label: "Base" },
              ...(studioCtx.site.activeScreenVariantGroup?.variants &&
              studioCtx.site.activeScreenVariantGroup.variants.length > 0
                ? [
                    {
                      title: "Screen Variants",
                      children:
                        studioCtx.site.activeScreenVariantGroup.variants.map(
                          (variant) => ({
                            value: variant.uuid,
                            label: variant.name,
                          })
                        ),
                    },
                  ]
                : []),
            ],
            value: selectedGlobalVariants[0]?.uuid ?? "base",
          },
        }}
        content={{
          children: mixin && (
            <MixinFormContent
              studioCtx={studioCtx}
              mixin={mixin}
              panelSelection={
                tag
                  ? {
                      // Every section except for position
                      typography: true,
                      spacing: true,
                      background: true,
                      container: true,
                      effect: true,
                      border: true,
                      sizing: true,
                      shadow: true,
                      transition: true,
                      transform: true,
                      list: true,
                    }
                  : {
                      // default text; only typography
                      typography: true,
                    }
              }
              inheritableTypographyPropsOnly={!tag}
              isDefaultTheme={true}
              isList={!!(tag && isTagListContainer(tag))}
              targetGlobalVariants={selectedGlobalVariants}
              warnOnRelativeFontUnits={true}
            />
          ),
        }}
        {...props}
      />
    );
  })
);

function initializeMixinWithDefaults(mixin: Mixin, selector: string) {
  const defaults = DEFAULT_THEME_STYLES[selector];
  if (defaults && DEVFLAGS.autoInitEmptyThemeStyles) {
    const rsh = new RuleSetHelpers(mixin.rs, selector);
    rsh.merge(defaults);
  }
}

export default DefaultStylesPanel;
