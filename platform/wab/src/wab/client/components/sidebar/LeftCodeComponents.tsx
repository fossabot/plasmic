// This is a skeleton starter React component generated by Plasmic.
// This file is owned by you, feel free to edit as you see fit.
import ListItem from "@/wab/client/components/ListItem";
import { MenuBuilder } from "@/wab/client/components/menu-builder";
import { showModalToRefreshCodeComponentProps } from "@/wab/client/components/modals/codeComponentModals";
import { buildCommonComponentMenuItems } from "@/wab/client/components/sidebar/LeftComponentsPanel";
import { DraggableInsertable } from "@/wab/client/components/studio/add-drawer/DraggableInsertable";
import { Matcher } from "@/wab/client/components/view-common";
import { Icon } from "@/wab/client/components/widgets/Icon";
import { AddItemType } from "@/wab/client/definitions/insertables";
import { reportError } from "@/wab/client/ErrorNotifications";
import ComponentIcon from "@/wab/client/plasmic/plasmic_kit/PlasmicIcon__Component";
import { StudioCtx } from "@/wab/client/studio-ctx/StudioCtx";
import { ViewCtx } from "@/wab/client/studio-ctx/view-ctx";
import { spawn } from "@/wab/common";
import {
  CodeComponent,
  getComponentDisplayName,
  getDefaultComponentKind,
  getDefaultComponentLabel,
  isHostLessCodeComponent,
} from "@/wab/components";
import {
  compareComponentPropsWithMeta,
  UnknownComponentError,
} from "@/wab/shared/code-components/code-components";
import { Menu, notification, Popover, Tooltip } from "antd";
import { observer } from "mobx-react";
import * as React from "react";
import { DraggableProvidedDragHandleProps } from "react-beautiful-dnd";

export const CodeComponentRow = observer(function ComponentRow(props: {
  studioCtx: StudioCtx;
  component: CodeComponent;
  matcher: Matcher;
  onFindReferences: () => void;
  isDragging?: boolean;
  dragHandleProps?: DraggableProvidedDragHandleProps;
  indent: number;
}) {
  const {
    studioCtx,
    component,
    matcher,
    onFindReferences,
    isDragging,
    dragHandleProps,
    indent,
  } = props;
  const overlay = () => {
    const builder = new MenuBuilder();

    builder.genSection(undefined, (push) => {
      push(
        <Menu.Item
          key="refresh"
          onClick={() => {
            const registration = studioCtx.codeComponentsRegistry
              .getRegisteredCodeComponentsMap()
              .get(component.name);
            if (!registration) {
              notification.error({
                message: "Code component not registered",
              });
              return;
            }
            const { meta } = registration;

            const diffsOrError = compareComponentPropsWithMeta(
              studioCtx.site,
              component,
              meta
            );
            diffsOrError.match({
              success: (diffs) => {
                if (
                  [
                    diffs.addedProps,
                    diffs.removedProps,
                    diffs.updatedProps,
                  ].some((i) => i.length > 0)
                ) {
                  spawn(
                    showModalToRefreshCodeComponentProps([
                      { ...diffs, component },
                    ])
                  );
                } else {
                  notification.info({
                    message: `${getComponentDisplayName(
                      component
                    )} is up to date`,
                  });
                }
              },
              failure: (err: UnknownComponentError) => {
                notification.error({
                  message: err.message,
                });
                reportError(err);
              },
            });
          }}
        >
          <strong>Refresh</strong> registered props
        </Menu.Item>
      );
    });

    buildCommonComponentMenuItems(
      builder,
      studioCtx,
      component,
      onFindReferences
    );

    builder.genSection(undefined, (push) => {
      if (isHostLessCodeComponent(component)) {
        return;
      }
      push(
        <Menu.Item
          key="delete"
          onClick={() =>
            studioCtx.siteOps().tryRemapCodeComponent(
              component,
              <>
                Delete code component {getComponentDisplayName(component)} (
                <code>{component.codeComponentMeta.importPath}</code>)
              </>
            )
          }
        >
          <strong>Delete</strong> component
        </Menu.Item>
      );
    });

    return builder.build({ menuName: "code-component-item-menu" });
  };

  const defaultComponentKind = getDefaultComponentKind(
    studioCtx.site,
    component
  );
  return (
    <DraggableInsertable
      sc={studioCtx}
      spec={{
        key: component.uuid,
        label: getComponentDisplayName(component),
        factory: (vc: ViewCtx) => {
          return vc.variantTplMgr().mkTplComponentWithDefaults(component);
        },
        icon: <Icon icon={ComponentIcon} />,
        type: AddItemType.tpl,
      }}
    >
      <Tooltip
        title={<code>{component.codeComponentMeta?.importPath}</code>}
        placement="topRight"
        mouseEnterDelay={1}
      >
        <ListItem
          isDragging={isDragging}
          icon={<Icon icon={ComponentIcon} />}
          menu={overlay}
          dragHandleProps={dragHandleProps}
          hasRightContents
          style={{ paddingLeft: indent * 24 }}
          rightContent={
            <Tooltip title={component.codeComponentMeta.importPath}>
              <code
                style={{
                  textOverflow: "ellipsis",
                  minWidth: 0,
                  overflow: "hidden",
                  whiteSpace: "nowrap",
                }}
              >
                {component.codeComponentMeta.importPath}
              </code>
            </Tooltip>
          }
        >
          {defaultComponentKind ? (
            <Popover
              content={
                <p>
                  <strong>Default component:</strong>{" "}
                  {getDefaultComponentLabel(defaultComponentKind)}
                </p>
              }
            >
              <strong>
                {matcher.boldSnippets(getComponentDisplayName(component))}
              </strong>
            </Popover>
          ) : (
            matcher.boldSnippets(getComponentDisplayName(component))
          )}
        </ListItem>
      </Tooltip>
    </DraggableInsertable>
  );
});
