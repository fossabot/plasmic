// This is a skeleton starter React component generated by Plasmic.
// This file is owned by you, feel free to edit as you see fit.
import { StyleToken } from "@/wab/classes";
import { useMultiAssetsActions } from "@/wab/client/components/sidebar/MultiAssetsActions";
import { ColorSwatch } from "@/wab/client/components/style-controls/ColorSwatch";
import { TokenDefinedIndicator } from "@/wab/client/components/style-controls/TokenDefinedIndicator";
import { Matcher } from "@/wab/client/components/view-common";
import Checkbox from "@/wab/client/components/widgets/Checkbox";
import { PlasmicColorTokenControl } from "@/wab/client/plasmic/plasmic_kit_left_pane/PlasmicColorTokenControl";
import { StudioCtx } from "@/wab/client/studio-ctx/StudioCtx";
import { TokenValueResolver } from "@/wab/shared/cached-selectors";
import Chroma from "@/wab/shared/utils/color-utils";
import { VariantedStylesHelper } from "@/wab/shared/VariantedStylesHelper";
import { Tooltip } from "antd";
import classNames from "classnames";
import * as React from "react";
import { DraggableProvidedDragHandleProps } from "react-beautiful-dnd";

interface ColorTokenControlProps {
  studioCtx: StudioCtx;
  token: StyleToken;
  readOnly?: boolean;
  matcher: Matcher;
  menu: () => React.ReactElement;
  isDragging?: boolean;
  dragHandleProps?: DraggableProvidedDragHandleProps;
  onClick?: () => void;
  resolver: TokenValueResolver;
  vsh?: VariantedStylesHelper;
}

function ColorTokenControl(props: ColorTokenControlProps) {
  const {
    studioCtx,
    token,
    readOnly,
    matcher,
    menu,
    isDragging,
    dragHandleProps,
    onClick,
    resolver,
    vsh,
  } = props;

  const multiAssetsActions = useMultiAssetsActions();

  const isSelected = multiAssetsActions.isAssetSelected(token.uuid);

  return (
    <Tooltip title={token.name} mouseEnterDelay={0.5}>
      <PlasmicColorTokenControl
        icon={
          <>
            {multiAssetsActions.isSelecting && (
              <Checkbox isChecked={isSelected}> </Checkbox>
            )}
            {vsh && (
              <TokenDefinedIndicator
                token={token}
                vsh={vsh}
                studioCtx={studioCtx}
                className={classNames("mr-sm")}
              />
            )}
            <ColorSwatch color={resolver(token, vsh)} />
          </>
        }
        value={matcher.boldSnippets(Chroma.stringify(resolver(token, vsh)))}
        isDraggable={!readOnly}
        isDragging={isDragging}
        listItem={{
          dragHandleProps,
          menu,
          onClick,
        }}
      >
        {matcher.boldSnippets(token.name)}
      </PlasmicColorTokenControl>
    </Tooltip>
  );
}

export default ColorTokenControl;
